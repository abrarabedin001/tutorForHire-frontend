// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailPassword {
  id       String  @id @default(cuid())
  email    String? @unique
  password String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Todo          Task[]
  teams         Team[]
  UserTeam      UserTeam[]
  TaskAssigned  TaskAssigned[]
  PersonalTask  PersonalTask[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id           String         @id @default(cuid())
  userId       String
  isCompleted  Boolean        @default(false)
  name         String
  teamId       String?
  createdBy    User?          @relation(references: [id], onDelete: Cascade, fields: [userId])
  team         Team?          @relation(references: [id], onDelete: Cascade, fields: [teamId])
  createdAt    DateTime?      @default(now())
  priority     Priority?      @default(LOW)
  DueDate      DateTime?
  TaskAssigned TaskAssigned[]
}

model PersonalTask {
  id          String  @id @default(cuid())
  userId      String
  isCompleted Boolean @default(false)
  name        String

  createdBy User? @relation(references: [id], onDelete: Cascade, fields: [userId])

  createdAt DateTime? @default(now())
  priority  Priority? @default(LOW)
  DueDate   DateTime?
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

model Team {
  id            String     @id @default(cuid())
  name          String
  creator       User       @relation(fields: [creatorId], onDelete: Cascade, references: [id])
  creatorId     String
  noTeamMembers Int
  task          Task[]
  UserTeam      UserTeam[]
}





model UserTeam {
  user           User         @relation(fields: [userId], onDelete: Cascade, references: [id])
  userId         String
  team           Team         @relation(fields: [teamId], onDelete: Cascade, references: [id])
  teamId         String
  permissions    PERMISSIONS? @default(VIEW)
  inviteAccepted DECISSIONS?  @default(UNDECIDED)

  @@id([teamId, userId])
}
/// userId, -> kun team? -> team Name, createdAt, creator ...

enum PERMISSIONS {
  ADMIN
  EDIT
  VIEW
}

enum DECISSIONS {
  UNDECIDED
  ACCEPTED
  DENIED
}

model TaskAssigned {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id])
  task   Task    @relation(fields: [taskId], references: [id])
  userId String?
  taskId String
}
